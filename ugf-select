#!/usr/bin/env python
#
#  Options:
#  set -- set the base path where git projects are located
#  select -- selects game
#  clean -- completely cleans currently selected game from Cocos2d-x environment.
#     git clean -f -d <path>   -- removes all untracked files
#  --copy-only-source -- copy only config and src files
#

from datetime import datetime
from subprocess import call

import json
import os
import re
import shutil
import sys

def gethomedir():
    from os.path import expanduser
    return expanduser("~")

class Config (object):
    @staticmethod
    def load(path):
        fh = open(path, "r")
        json_blob = fh.read()
        fh.close()
        config = Config.configFromJson(json.loads(json_blob))
        return config

    @staticmethod
    def configFromJson(json):
        return Config(basepath=json["basepath"])

    def __init__(self, basepath=None):
        self.basepath = basepath

class SelectOptions (object):
    def __init__(self, resource=None):
        self.resource = resource

# Project configuration structure.
class ProjectConfig (object):
    @staticmethod
    def load(path):
        fh = open(path, "r")
        json_blob = fh.read()
        fh.close()
        config = json.loads(json_blob)
        return ProjectConfig(path, **config)

    def __init__(self, path, **entries):
        self.__dict__.update(entries)
        self.checkvals()

    def checkvals(self):
        for val in self.requiredvals():
            if val not in self.__dict__ or len(str(self.__dict__[val])) < 1:
                print("Project configuration {} must have value '{}'".format(path, val))
                sys.exit(1)
        for val in self.optionalvals():
            if val not in self.__dict__:
                print("Project configuration {} must contain key '{}'".format(path, val))

    def requiredvals(self):
        return ["cocos", "bundle", "name", "executable", "version", "build", "device", "orientation", "design"]

    def optionalvals(self):
        return ["hockeyappid", "facebookid"]

# Builds Cocos2d-x realted paths.
class CocosPathBuilder (object):
    # @param Config
    # @param ProjectConfig
    # @param SelectOptions
    def __init__(self, config, project, options):
        self.config = config
        self.project = project
        self.options = options

    def basepath(self):
        return os.path.join(self.config.basepath, "Cocos2d-x_v{}".format(self.project.cocos))

    def path(self, path):
        return os.path.join(self.basepath(), path)

    def iosprojectpath(self):
        return os.path.join(self.basepath(), "frameworks/runtime-src/proj.ios_mac/GameTools.xcodeproj/project.pbxproj")

class StagePathBuilder (object):
    def __init__(self, cocospath):
        self.cocospath = cocospath

    def basepath(self):
        return os.path.join(self.cocospath, "stage")

    def path(self, path):
        return os.path.join(self.basepath(), path)

# Builds project related paths.
class ProjectPathBuilder (object):
    # @param Config
    # @param str - project name
    # @param SelectOptions
    def __init__(self, config, projectname, options):
        self.config = config
        self.projectname = projectname
        self.options = options

    def basepath(self):
        return os.path.join(self.config.basepath, self.projectname)

    def path(self, path):
        return os.path.join(self.basepath(), path)

    def configpath(self):
        return os.path.join(self.basepath(), "config.json")

    def resdir(self):
        return self.options.resource and len(self.options.resource) > 0 and self.options.resource+"/" or ""

    def resourcepath(self):
        return os.path.join(self.basepath(), "platform/ios/{}res/Images.xcassets".format(self.resdir()))

def interpolate_iospbxproj(project, blob):
    # Global
    blob = re.sub("productName = GameTools;", "productName = {};".format(project.executable), blob)
    blob = re.sub("PRODUCT_BUNDLE_IDENTIFIER = com.upstartillustration.GameTools;", "PRODUCT_BUNDLE_IDENTIFIER = {};".format(project.bundle), blob)
    # Mobile
    blob = re.sub("GameTools-mobile.app", "{}-mobile.app".format(project.executable), blob)
    blob = re.sub("\/\* GameTools-mobile \*\/", "/* {}-mobile */".format(project.executable), blob)
    blob = re.sub('"GameTools-mobile"', '"{}-mobile"'.format(project.executable), blob)
    # Desktop
    blob = re.sub("GameTools-desktop.app", "{}-desktop.app".format(project.executable), blob)
    blob = re.sub("\/\* GameTools-desktop \*\/", "/* {}-desktop */".format(project.executable), blob)
    blob = re.sub('"GameTools-desktop"', '"{}-desktop"'.format(project.executable), blob)
    # Final global (order matters...)
    blob = re.sub('"GameTools"', '"{}"'.format(project.executable), blob)
    return blob

def interpolate_iosplist(project, blob):
    c = None
    # Orientation
    if project.orientation == "landscape":
        c = """<string>UIInterfaceOrientationLandscapeRight</string>
        <string>UIInterfaceOrientationLandscapeLeft</string>"""
    else:
        c = """<string>UIInterfaceOrientationPortrait</string>"""
    blob = re.sub("##UGF-ORIENTATION-IOS##", c, blob)
    return blob

class Interpolator (object):
    # @param PathBuilder
    # @param CocosPathBuilder
    # @param StagePathBuilder
    # @param dict - contains key/values to interpolate within template
    def __init__(self, project, cocos, stage, keys):
        self.project = project
        self.cocos = cocos
        self.stage = stage
        self.keys = keys

    # @param template - template file that will be interpolated
    # @param target - target path where template will be copied to after interpolation
    # @param func - Function that provides additional interpolation rules
    def interpolate(self, template, target, interpolator=None):
        # Read
        fh = open(self.cocos.path(template), "r")
        blob = fh.read()
        for key, val in self.keys.iteritems():
            blob = re.sub(key, str(val), blob)
        if interpolator:
            blob = interpolator(self.project, blob)
        fh.close()
        # Write
        stagepath = self.stage.path(os.path.split(template)[1])
        fh = open(stagepath, "w")
        fh.write(blob)
        fh.close()
        # Copy to target location.
        shutil.copyfile(stagepath, self.cocos.path(target))

# Select and make 'project' the active project.
def select(project, source, cocos, options):
    print("ugf-select v1.0.0, Time: {}".format(str(datetime.now())))
    print("Project: {} v{} b{}".format(project.name, project.version, project.build))
    if len(options.resource) > 0:
        print("Resource: {}".format(options.resource))

    stage = StagePathBuilder(cocos.basepath())

    # Load and save any changes made to the project to the current project
    # NOTE: I'm not sure this is necessary.

    # Load the target project - config.json

    # Save the target project as the current project
    # NOTE: I'm not sure this is necessary.

    # If the project does not exist, take the template for the given version of Cocos2d-x and replace all
    # instances of the template name 'GameTools' with the target app's name.

    # Interpolate template files: (The app will raise an exception if the files below do not contain the tags)

    if not os.path.exists(stage.basepath()):
        os.makedirs(stage.basepath())

    keys = {
        "##UGF-APP-BUNDLE##": project.bundle
      , "##UGF-APP-NAME##": project.name
      , "##UGF-APP-VERSION##": project.version
      , "##UGF-APP-BUILD##": project.build
      , "##UGF-EXECUTABLE##": project.executable
      , "##UGF-HOCKEY-APP-ID##": project.hockeyappid
      , "##UGF-FACEBOOK-ID##": project.facebookid
      , "##UGF-DESIGN-WIDTH##": project.design["width"]
      , "##UGF-DESIGN-HEIGHT##": project.design["height"]
      , "##UGF-SHOW-FPS##": "false"
      , "##UGF-ORIENTATION##": project.orientation
    }

    # The pbxproj does not need to be a template.
    shutil.copyfile(cocos.iosprojectpath(), stage.path("project.pbxproj"))

    interpolator = Interpolator(project, cocos, stage, keys)
    interpolator.interpolate("templates/ios/Info.plist", "frameworks/runtime-src/proj.ios_mac/ios/Info.plist", interpolate_iosplist)
    interpolator.interpolate("templates/ios/AppConfig.h", "frameworks/runtime-src/proj.ios_mac/ios/AppConfig.h")
    interpolator.interpolate("templates/config.lua", "src/config.lua")
    interpolator.interpolate("stage/project.pbxproj", "frameworks/runtime-src/proj.ios_mac/GameTools.xcodeproj/project.pbxproj", interpolate_iospbxproj)

    # @todo Cleanup stage directory

    # @todo The orientation config may need to be specific to files so that
    # operations are checked correctly, but also that some options are removed!

    # Copy interpolated file to correct location.

    # Copy Xcode assets
    call(["rm", "-rf", cocos.path("frameworks/runtime-src/proj.ios_mac/GameTools-mobile/*")])
    call(["cp", "-r", source.resourcepath(), cocos.path("frameworks/runtime-src/proj.ios_mac/GameTools-mobile/")])

    # Copy Android assets

    # Copy GameTools
    call(["rm", "-rf", cocos.path("src/ugf")])
    call(["cp", "-r", "/Users/eric/git/GameTools/src", cocos.path("src/ugf")])

    # Copy game source and assets
    call(["rm", "-rf", cocos.path("src/game")])
    call(["cp", "-r", source.path("src"), cocos.path("src/game")])

    call(["rm", "-rf", cocos.path("res")])
    call(["cp", "-r", source.path("res"), cocos.path("res")])

    # Update a compile time script that will call this script with the currently selected project before build
    # so that all of the latest code is copied. (???)

    # Removes all untracked files
    #call(["git", "clean", "-f", "-d", cocos.basepath()])
    # Removes all unstaged files
    #call(["git", "checkout", cocos.basepath()])

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Upstart Game Framework - Configure a project to build for specific version of Cocos2d-x")
    parser.add_argument('project', help="The project name to configure")
    parser.add_argument('--resource', help="Select the resource to use for project's icons and launch images (i.e. free, premium)", default=None)
    args = parser.parse_args()

    config = Config.load(os.path.join(gethomedir(), ".ugf"))
    options = SelectOptions(args.resource and args.resource or "")
    source = ProjectPathBuilder(config, args.project, options)
    project = ProjectConfig.load(source.configpath())
    cocos = CocosPathBuilder(config, project, options)
    select(project, source, cocos, options)
