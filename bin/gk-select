#!/usr/bin/env python
#
# Selects (installs/configures) a project into a Cocos2d-x project.
#
# @copyright 2015 Upstart Illustration LLC. All rights reserved.
#

from datetime import datetime
from subprocess import call

import os
import re
import shutil
import sys

from ugf import getversion
from ugf.config import configpath, Config, ProjectConfig
from ugf.pathbuilder import CocosPathBuilder, StagePathBuilder, ProjectPathBuilder
from ugf.interpolator import Interpolator
from ugf.mediation import load_mediation_config

VERSION = getversion(__file__, "1.0.0")

def run_pre_select(config, source, cocos):
    script = source.path("ugf/pre-select")
    if os.path.isfile(script):
        print("Running pre-select script...")
        call([script, cocos.basepath(), config.apptype])

def run_post_select(config, source, cocos):
    script = source.path("ugf/post-select")
    if os.path.isfile(script):
        print("Running post-select script...")
        call([script, cocos.basepath(), config.apptype])

def install_pods(cocos):
    os.chdir(cocos.iosmacprojpath())
    call(["pod", "install"])

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="GameKit - Activate project for a specific version of Cocos2d-x")
    parser.add_argument('project', help="The project name to activate")
    parser.add_argument('--app-type', help="The type of project (i.e. free, premium) This determines which config and resource files to copy", default=None)
    args = parser.parse_args()

    app_type = args.app_type and args.app_type or ''
    result = call(["gk-download", args.project, "--app-type", app_type, "--suppress-warnings"])
    if result != 0:
        print("gk-download failed. Cancelling the select operation.")
        sys.exit(result)

    config = Config.load(configpath())
    config.project = args.project
    config.apptype = app_type
    config.save(configpath())

    source = ProjectPathBuilder(config)
    project = ProjectConfig.load(source.configpath())
    cocos = CocosPathBuilder(config, project.cocos)

    print("{}, Time: {}".format(VERSION, str(datetime.now())))
    print("Project: {} v{} b{}".format(project.name, project.version, project.build))

    # @todo Possibly create a script that copies any _modified_ files, in the currently configured
    # Cocos2d-x repository, back into the current project's file structure. This way, if app icons
    # are updated, etc. they are reflected back into the project's directory.
    print("To avoid Xcode crashing make sure to close the GameKit project before running!")
    run_pre_select(config, source, cocos)
    call(["gk-clean", "--version", project.cocos])
    call(["gk-configure"])
    call(["gk-copy"])
    run_post_select(config, source, cocos)
    install_pods(cocos)
