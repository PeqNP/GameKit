#!/usr/local/bin/lua
--[[
  Removes dupes within provided path.

  $ gk-gm-remove-dupes path/to/dir/containing/tileset/images

  @copyright 2015 Upstart Illustration LLC. All rights reserved.

  ]]

function set_path()
    local path = arg[0]
    local index = string.find(path, "/[^/]*$")
    if not index or index == 0 then return end
    local parent_dir = path:sub(0, index)
    package.path = parent_dir .. "?.lua;" .. package.path
end
set_path()

require("stdout")
local util = require("util")

--[[
  Remove all dupe tile files within 'path'. 'path' must have an end whack.

  ]]
local function remove_dupe_images(path, prefix)
    print("Removing dupes\n")
    local hashes = {}
    local dupes = 0
    local files = util.get_files(path, prefix)
    for _, file in ipairs(files) do
        local fullpath = path..file
        local pfile = io.popen('md5 ' .. fullpath)
        local lines = pfile:lines()
        local hash
        local i = 0
        for line in pfile:lines() do
            local index = string.find(line, "=")
            hash = string.sub(line, index + 2) -- +2 removes the '= ', leaving only the hash
        end
        if hashes[ hash ] then
            dupes = dupes + 1
            stdout.r("\r" .. string.rep(".", dupes))
            local success, reason = os.remove(fullpath)
            if not success then
                print(string.format("Failed to remove file (%s) reason (%s)", fullpath, reason))
            end
        else
            hashes[ hash ] = true
        end
    end
    print("\nDupes: ", dupes)
end

local function reindex_image_files(path, prefix)
    stdout.r("\rReindexing...")
    local files = util.get_files(path, prefix)
    local num_files = #files
    local num_chars = string.len(tostring(num_files))
    if num_chars < 2 then
        num_chars = 2
    end
    local new_names = {}
    -- Re-index the file name to start at '1'
    for i, old_name in ipairs(files) do
        local index = string.find(old_name, "-[^-]*$") -- last '-' in string
        local mod_name = string.sub(old_name, 0, index)
        local new_name = string.format("m-%s%0" .. num_chars .. "d.png", mod_name, i) -- 'm-' ensures existing file is not over-written.
        os.rename(path..old_name, path..new_name)
        table.insert(new_names, new_name)
    end
    -- Remove the 'm-' part from the filename.
    for _, old_name in ipairs(new_names) do
        local new_name = string.sub(old_name, 3)
        os.rename(path..old_name, path..new_name)
    end
    stdout.r("\rReindexing...done\n")
end

local path = arg[1]
if not path then
    print("'path' required")
    os.exit(1)
end

local prefix = arg[2]
if not prefix then
    print("'prefix' required")
    os.exit(1)
end

remove_dupe_images(path, prefix)
reindex_image_files(path, prefix)

os.exit(0)
