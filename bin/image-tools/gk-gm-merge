#!/usr/local/bin/lua
--[[
  Merges multiple images into one image.

  This will merge all image files in 'source/dir' to 'output/dir', from image
  composition at '0,0', with tiles that are '32x32' in size. The number of
  rows and columns is determined automatically. In this scenario, there are 101
  files in the 'source/dir'. This will create compose the tiles in a 25x26 tileset.

  $ gk-gm-merge source/dir/ output/merged.png 32 32

  @copyright 2015 Upfrom Illustration LLC. All rights reserved.

  ]]

function set_path()
    local path = arg[0]
    local index = string.find(path, "/[^/]*$")
    if not index or index == 0 then return end
    local parent_dir = path:sub(0, index)
    package.path = parent_dir .. "?.lua;" .. package.path
end
set_path()

require("stdout")
local util = require("util")

print("merge.lua v1.0a, Mar 6th 2015. Copyright (C) 2015 Upfrom Illustration LLC")
print("Current time:", os.date("%c", os.time()))
print("")

local function merge_images(source, target, size)
    local total = 0
    local x, y = 0, 0
    local files = util.get_files(source)
    local rows = math.floor(math.sqrt(#files))
    local cols = rows
    local extra = #files % rows
    if extra > 0 then
        rows = rows + 1
    end

    print(string.format("Creating canvas w/ grid size %dx%d", cols, rows))
    os.execute(string.format("convert -size %dx%d xc:none %s", rows*size.height, cols*size.width, target))

    for i, file in ipairs(files) do
        local path = source..file
        total = i
        local cmd = string.format("composite -geometry +%d+%d %s %s %s", x, y, path, target, target)
        --print("Command:", cmd)
        os.execute(cmd)
        stdout.r(string.rep(".", total))
        -- Move to the right
        x = x + size.width
        if x > cols*size.width then
            x = 0
            y = y + size.height
        end
    end

    print("done\n")
    print("Total merged:", total)
end

--[[ Command Line ]]--

local source = arg[1]
local target = arg[2]
local width = tonumber(arg[3])
local height = tonumber(arg[4])

if not source then
    print("source required")
    os.exit(1)
end

if not target then
    print("target required")
    os.exit(1)
end

if not width or width < 1 then
    print("width > 1 required")
    os.exit(1)
end

if not height or height < 1 then
    print("height > 1 required")
    os.exit(1)
end

local size = {
    height = height
  , width = width
}

merge_images(source, target, size)

os.exit(0)
