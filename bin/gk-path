#!/usr/bin/env python
#
# Provides path configuration for local and remote resources.
#
# @copyright (c) 2016 Upstart Illustration LLC. All rights reserved.
#

import os
from datetime import datetime

from ugf import getversion
from ugf.config import configpath, checkconfig, Config

VERSION = getversion(__file__, "1.0.0")

def main():
    pass

if __name__ == "__main__":
    import argparse

    operations = ["configure", "print"]

    parser = argparse.ArgumentParser(description="Upstart Game Framework - Configure local and remote paths")
    parser.add_argument('operations', help="Installation processes: {}. Default: configure".format(", ".join(operations)), nargs="*", default=["all"])
    args = parser.parse_args()

    print("{}, Time: {}".format(VERSION, str(datetime.now())))
    print

    valid_operations = ["all"] + operations
    for option in args.operations:
        if option not in valid_operations:
            print("Invalid configure option '{}'. Valid operations are: {}".format(option, ", ".join(valid_operations)))
            sys.exit(1)

    options = "all" in args.operations and ["configure"] or args.operations

    # print current configuration
    # configure
    # download - must be configured first
    # install - must be downloaded first
    config = Config.load(configpath())

    if "print" in options:
        if config.hasConfig():
            print("Current configuration")
            print("Local: {}".format(config.basepath))
            print("Remote: {}".format(config.remote))
            print
        else:
            print("Incomplete configuration! Please run gk-path configure to configure paths.")
    
    if "configure" in options:
        while True:
            print("Where do you want the UGF dependencies to be stored locally?")
            config.basepath = raw_input("Local path: ")
            if os.path.exists(config.basepath):
                break
            else:
                print("The path {} does not exist!".format(config.basepath))
                print
        print("Which Git repository should dependencies be downloaded from?")
        config.remote = raw_input("Remote URL to Git repository: ")
        config.save(configpath())
        print("Saved config to: {}".format(configpath()))
