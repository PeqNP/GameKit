#!/usr/bin/env python
#
# Selects (configures) a project into a Cocos2d-x project.
#
# TODO: Provide option to configure a specific platform's files.
#
# @copyright 2015 Upstart Illustration LLC. All rights reserved.
#

from datetime import datetime
from subprocess import call

import os
import re
import shutil
import sys

from ugf import getversion
from ugf.config import configpath, checkconfig, Config, ProjectConfig
from ugf.pathbuilder import CocosPathBuilder, StagePathBuilder, ProjectPathBuilder, iOS_GameKitPathBuilder, Android_GameKitPathBuilder, DependenciesPathBuilder, AndroidSDKPathBuilder
from ugf.interpolator import Interpolator
from ugf.mediation import load_mediation_config
from ugf.iap import load_iap_config
from ugf.royal import load_royal_config

VERSION = getversion(__file__, "1.0.0")

def interpolate_iospbxproj(project, blob):
    # Global
    blob = re.sub("productName = GameTools;", "productName = {};".format(project.executable), blob)
    blob = re.sub("PRODUCT_BUNDLE_IDENTIFIER = com.upstartillustration.GameTools;", "PRODUCT_BUNDLE_IDENTIFIER = {};".format(project.bundle), blob)
    # Mobile
    blob = re.sub("GameTools-mobile.app", "{}-mobile.app".format(project.executable), blob)
    blob = re.sub("\/\* GameTools-mobile \*\/", "/* {}-mobile */".format(project.executable), blob)
    blob = re.sub('"GameTools-mobile"', '"{}-mobile"'.format(project.executable), blob)
    # Desktop
    blob = re.sub("GameTools-desktop.app", "{}-desktop.app".format(project.executable), blob)
    blob = re.sub("\/\* GameTools-desktop \*\/", "/* {}-desktop */".format(project.executable), blob)
    blob = re.sub('"GameTools-desktop"', '"{}-desktop"'.format(project.executable), blob)
    # Final global (order matters...)
    blob = re.sub('"GameTools"', '"{}"'.format(project.executable), blob)
    return blob

def interpolate_iosplist(project, blob):
    c = None
    # Orientation
    if project.orientation == "landscape":
        c = """<string>UIInterfaceOrientationLandscapeRight</string>
        <string>UIInterfaceOrientationLandscapeLeft</string>"""
    else:
        # @fixme Portrait is required to support landscape in order for AdColony
        # ad SDK to not crash the app after an ad has been displayed.
        c = """<string>UIInterfaceOrientationLandscapeRight</string>
        <string>UIInterfaceOrientationLandscapeLeft</string>
        <string>UIInterfaceOrientationPortrait</string>"""
    blob = re.sub("##UGF-ORIENTATION##", c, blob)
    # Facebook ID
    if project.facebookid:
        c = """<key>CFBundleURLTypes</key>
        <array>
            <dict>
                <key>CFBundleURLSchemes</key>
                <array>
                    <string>fb{}</string>
                </array>
            </dict>
        </array>
        <key>FacebookAppID</key>
        <string>{}</string>
        <key>FacebookDisplayName</key>
        <string>Blobfish Evolution</string>""".format(project.facebookid, project.facebookid)
        blob = re.sub("##UGF-FACEBOOK##", c, blob)
    return blob

def interpolate_configjson(project, blob):
    isLandscape = project.orientation == "landscape" and "true" or "false"
    blob = re.sub("##UGF-ORIENTATION##", isLandscape, blob)
    return blob

def interpolate_projectconfig(project, blob):
    return re.sub("##UGF-ORIENTATION##", project.orientation, blob)

def configure_ios_sdk_dependencies(project, cocos, stage):
    defines = []
    if project.facebookid:
        defines.append("#define FACEBOOK_ENABLED")
    if project.hockeyappid:
        defines.append("#define HOCKEYAPP_ENABLED")
    keys = {
        "##UGF-SDK-DEPENDENCIES##": "\n".join(defines)
    }
    interpolator = Interpolator(project, cocos, stage, keys)
    interpolator.interpolate("templates/project/ios/GKConfig.h", cocos.iosmacprojpath("GameKit/GameTools/GKConfig.h"))

# Adds mediation network dependencies to Pods file.
def configure_ios_pods(pods, project, cocos, stage):
    keys = {
        "##UGF-EXECUTABLE##": project.executable
      , "##UGF-MEDIATION-DEPENDENCIES##": "    " + "\n    ".join(pods)
    }
    interpolator = Interpolator(project, cocos, stage, keys)
    interpolator.interpolate("templates/project/ios/Podfile", "frameworks/runtime-src/proj.ios_mac/Podfile")

# Copies GameKit-iOS source files for only the mediation networks that have been selected.
def copy_native_ios_gamekit(networks, cocos, adkit):
    # Copy entire directory to Frameworks
    adkitsrc = adkit.sourcedir()
    if not os.path.isdir(adkitsrc):
        raise Exception("Native iOS GameKit source files are expected to be at '{}'".format(adkitsrc))
    adkitdest = cocos.iosmacprojpath("GameKit")
    if os.path.isdir(adkitdest):
        shutil.rmtree(adkitdest)
    shutil.copytree(adkitsrc, adkitdest)
    # Remove any network folder that is not in the list of frameworks for this project.
    networkdir = os.path.join(adkitdest, "Networks")
    availNetworks = os.listdir(networkdir)
    for network in availNetworks:
        found = None
        for n in networks:
            if network == n.name:
                found = network
                break
        if not found:
            removepath = os.path.join(networkdir, network)
            shutil.rmtree(removepath)
    os.chdir(cocos.iosmacprojpath())
    call(["./add_gamekit_files.rb"])

def copy_native_android_gamekit(networks, cocos, gamekit):
    gamekitsrc = gamekit.sourcedir()
    if not os.path.isdir(gamekitsrc):
        raise Exception("Native Android GameKit source files are expected to be at '{}'".format(gamekitsrc))
    gamekitdest = cocos.androidprojpath("src/com/upstartillustration")
    if os.path.isdir(gamekitdest):
        shutil.rmtree(gamekitdest)
    shutil.copytree(gamekitsrc, gamekitdest)

def configure_supported_networks_header(networks, cocos):
    defines = []
    for network in networks:
        defines.append("#define UGF_{}".format(network.name.upper()))
    keys = {
        "##UGF-MEDIATION-DEPENDENCIES##": "\n".join(defines)
    }
    interpolator = Interpolator(project, cocos, stage, keys)
    interpolator.interpolate("templates/project/ios/SupportedNetworks.h", cocos.iosmacprojpath("GameKit/GameTools/AdKit/SupportedNetworks.h"))

def create_lua_mediation(mediation, cocos):
    lua_require = []
    for network in mediation.getNetworks():
        lua_require.append("local {}Network = require(\"ad.network.{}Network\")".format(network.name, network.name))
    lua = """--
-- Mediation network configuration file.
--
-- Auto-generated by {} @ {}
--

require "ad.Constants"
local AdConfig = require("ad.Config")
local Ad = require("ad.Ad")
{}

local url = "{}"
local adConfig = {}
local networks = {{
    {}
}}
return {{adConfig, networks, url}}
    """.format(VERSION, datetime.now(), "\n".join(lua_require), mediation.getUrl(), mediation.configToLua(), mediation.networksToLua(",\n    "))
    fh = open(cocos.mediationluapath(mediation.getPlatform()), "w")
    fh.write(lua)
    fh.close()

def load_mediation(platform, source):
    path = source.mediationpath(platform)
    try:
        return load_mediation_config(platform, path)
    except Exception, exc:
        print(exc)
        return None, None, None

def create_lua_iap(iap, cocos):
    lua = """--
-- IAP configuration file.
--
-- Auto-generated by {} @ {}
--

local Ticket = require("iap.Ticket")

local iap = {{
    {}
}}

return iap
    """.format(VERSION, datetime.now(), iap.ticketsToLua(",\n    "))
    fh = open(cocos.iapluapath(iap.getPlatform()), "w")
    fh.write(lua)
    fh.close()

def load_iap(platform, source):
    path = source.iappath(platform)
    try:
        return load_iap_config(platform, path)
    except Exception, exc:
        return None

def create_lua_royal(royal, cocos):
    lua = """--
-- Royal Ad Network configuration file.
--
-- Auto-generated by {} @ {}
--

local url = "{}"

return url
    """.format(VERSION, datetime.now(), royal.getUrl())
    fh = open(cocos.royalluapath(royal.getPlatform()), "w")
    fh.write(lua)
    fh.close()

def load_royal(platform, source):
    path = source.royalpath(platform)
    try:
        return load_royal_config(platform, path)
    except Exception, exc:
        return None

#
# Copy mediation.config.json to Cocos2d-x res/ directory.
#
# @note This won't work as we can't load resources from code. It's staying here until
# I can figure out how to turn the default configuration into a Lua file; which seems
# to be way more work than what is necessary.
#
def copy_mediation_config(platform, source, cocos):
    source = source.mediationconfigpath(platform)
    if os.path.exists(source):
        shutil.copyfile(source, cocos.mediationconfigpath(platform))

def get_main_keys():
    return {
        "##UGF-APP-BUNDLE##": project.bundle
      , "##UGF-APP-NAME##": project.name
      , "##UGF-APP-VERSION##": project.version
      , "##UGF-APP-BUILD##": project.build
      , "##UGF-EXECUTABLE##": project.executable
      , "##UGF-HOCKEY-APP-ID##": project.hockeyappid
      , "##UGF-FACEBOOK-ID##": project.facebookid
      , "##UGF-DESIGN-WIDTH##": project.design["width"]
      , "##UGF-DESIGN-HEIGHT##": project.design["height"]
      , "##UGF-SHOW-FPS##": "false"
    }

def configure_cocos_targets(project, source, cocos, stage):
    keys = get_main_keys()
    interpolator = Interpolator(project, cocos, stage, keys)
    interpolator.interpolate("templates/config.json", "config.json", interpolate_configjson)
    interpolator.interpolate("templates/project/config.lua", "src/config.lua", interpolate_projectconfig)

# Select and make 'project' the active project.
def configure_ios_targets(project, source, cocos, stage):
    # Load and save any changes made to the project to the current project
    # NOTE: I'm not sure this is necessary.

    # Save the target project as the current project
    # NOTE: I'm not sure this is necessary.

    # Interpolate template files
    keys = get_main_keys()

    # The pbxproj should not be a template, as it changes often. All replacements
    # can be done by replacing GameTools anyways.
    shutil.copyfile(cocos.iosprojectpath(), stage.path("project.pbxproj"))

    interpolator = Interpolator(project, cocos, stage, keys)
    interpolator.interpolate("templates/project/ios/Info.plist", cocos.iosmacprojpath("ios/Info.plist"), interpolate_iosplist)
    interpolator.interpolate("stage/project.pbxproj", cocos.iosmacprojpath("GameTools.xcodeproj/project.pbxproj"), interpolate_iospbxproj)
    interpolator.interpolate("templates/project/ios/GKConfig.m", cocos.iosmacprojpath("GameKit/GameTools/GKConfig.m"))

    # TODO: Cleanup stage directory
    # TODO: The orientation config may need to be specific to files so that
    # operations are checked correctly, but also that some options are removed!

# @note This must include mediation, IAP, etc. as all of these libs must be configured at
# the same time.
def configure_android_targets(networks, project, source, cocos, stage):
    keys = get_main_keys()
    interpolator = Interpolator(project, cocos, stage, keys)
    interpolator.interpolate("templates/project/android/strings.xml", cocos.androidprojpath("res/values/strings.xml"))

    # Add app configuration to AndroidManifest.xml
    appconfig = []
    for network in networks:
        if network.name.lower() == "adcolony":
            appconfig.append(interpolator.interpolate("templates/project/android/application/adcolony"))
    # @todo If Facebook, add.
    appconfig.append(interpolator.interpolate("templates/project/android/application/facebook"))
    keys["##UGF-APP-CONFIG##"] = "\n\n".join(appconfig)

    interpolator = Interpolator(project, cocos, stage, keys)
    interpolator.interpolate("templates/project/android/AndroidManifest.xml", cocos.androidprojpath("AndroidManifest.xml"))

def copy_files(src, dst):
    # Single file
    if not os.path.isdir(src):
        shutil.copy(src, os.path.join(dst, os.path.basename(src)))
        return
    # Directory
    files = os.listdir(src)
    for filename in files:
        srcpath = os.path.join(src, filename)
        dstpath = os.path.join(dst, filename)
        if os.path.isfile(srcpath):
            shutil.copy(srcpath, dstpath)
        elif os.path.isdir(srcpath):
            if not os.path.isdir(dstpath):
                os.makedirs(dstpath)
            copy_files(srcpath, dstpath)

def copy_android_dependencies(dependencies, cocos, networks):
    libpath = cocos.androidprojpath("libs")
    if os.path.isdir(libpath):
        shutil.rmtree(libpath)
    os.makedirs(libpath)
    # Create dependency list to copy to Android libs.
    # @fixme this should be part of a config file which points the network to its
    # folder within the deps directory.
    deps = []
    for network in networks:
        if "adcolony" == network.name.lower():
            deps.append("adcolony-android-sdk-2.3.1")
    # Always copy
    deps.append("gson-2.6.2.jar")
    # Copy Android libs.
    for dep in deps:
        copy_files(dependencies.path(dep), libpath)

def configure_android_sdk_dependencies(cocos, android):
    properties = cocos.androidprojpath("project.properties", True)
    # Return the file back to its original state before making modifications.
    os.chdir(cocos.basepath())
    call(["git", "checkout", properties])
    # Inspect properties file and determine where to put GameKit dependencies.
    fh = open(properties, "r")
    refnum = 0
    reftag = "android.library.reference."
    lines = []
    for line in fh:
        line = line.strip()
        lines.append(line)
        if len(line) == 0:
            continue
        if line[0] == "#":
            continue
        key, value = line.split("=")
        key, value = key.strip(), value.strip()
        # Determine the last ref number. This will determine the ref number we will use
        # to inject our own dependencies.
        if reftag in key:
            num = int(key[len(reftag):])
            if num > refnum:
                refnum = num
    fh.close()
    # Add dependencies. These dependencies must have already been downloaded with Android Studio
    # or placed in the GameKit-dependencies folder. In fact, in the future, regardless of where
    # it was downloaded, there must be either a soft link to the directory in GameKit-dependencies
    # or the actual file.

    # @fixme Add Google Play Services only if needed. Other dependencies require this dependency
    # as well (AdColony). In other words, the necessary requirements for when this lib should be
    # added to the project haven't been completely figured out. For now, always add it. This is
    # almost always we want any ways.
    if not os.path.isdir(android.googleplaylibpath()):
        raise Exception("Android Google Play Services lib is not at {}".format(android.googleplaylibpath()))
    lines.append("{}{}={}".format(reftag, refnum+1, android.googleplaylibpath(cocos.androidprojpath())))
    # Write dependencies to properties file.
    fh = open(properties, "w")
    fh.write("\n".join(lines))
    fh.close()

if __name__ == "__main__":
    import argparse

    operations = ["dependencies", "lua", "gamekit", "project"]

    parser = argparse.ArgumentParser(description="Upstart Game Framework - Configures a project into a Cocos2d-x project")
    parser.add_argument('operations', help="Configuration processes to perform on project: {}".format(", ".join(operations)), nargs="*", default=["all"])
    args = parser.parse_args()

    print("{}, Time: {}".format(VERSION, str(datetime.now())))

    valid_operations = ["all"] + operations
    for option in args.operations:
        if option not in valid_operations:
            print("Invalid configure option '{}'. Valid operations are: {}".format(option, ", ".join(valid_operations)))
            sys.exit(1)

    options = "all" in args.operations and operations or args.operations

    config = Config.load(configpath())
    checkconfig(config)

    source = ProjectPathBuilder(config)
    project = ProjectConfig.load(source.configpath())
    cocos = CocosPathBuilder(config, project.cocos)
    ios_gamekit = iOS_GameKitPathBuilder(config)
    android_gamekit = Android_GameKitPathBuilder(config)
    stage = StagePathBuilder(cocos.basepath())
    dependencies = DependenciesPathBuilder(config)
    android = AndroidSDKPathBuilder(config)
    ios_mediation = load_mediation("ios", source)
    android_mediation = load_mediation("android", source)
    ios_iap = load_iap("ios", source)
    android_iap = load_iap("android", source)
    ios_royal = load_royal("ios", source)
    android_royal = load_royal("android", source)

    if not os.path.exists(stage.basepath()):
        os.makedirs(stage.basepath())

    # ---- iOS Mediation -----
    if ios_mediation and ios_mediation.hasNetworks():
        if "dependencies" in options:
            configure_ios_pods(ios_mediation.getPods(), project, cocos, stage)
        if "lua" in options:
            create_lua_mediation(ios_mediation, cocos)
        if "gamekit" in options:
            copy_native_ios_gamekit(ios_mediation.getNetworks(), cocos, ios_gamekit)
            configure_supported_networks_header(ios_mediation.getNetworks(), cocos)
            configure_ios_sdk_dependencies(project, cocos, stage)
    else:
        print("No mediation networks configured for iOS project. Skipping...")

    # ----- Android Mediation -----
    if android_mediation and android_mediation.hasNetworks():
        if "dependencies" in options:
            copy_android_dependencies(dependencies, cocos, android_mediation.getNetworks())
            configure_android_sdk_dependencies(cocos, android)
        if "lua" in options:
            create_lua_mediation(android_mediation, cocos)
        if "gamekit" in options:
            copy_native_android_gamekit(android_mediation.getNetworks(), cocos, android_gamekit)
    else:
        print("No mediation networks configured for Android project. Skipping...")

    # ----- iOS IAP -----
    if ios_iap:
        if "lua" in options:
            create_lua_iap(ios_iap, cocos)
    else:
        print("No IAP configured for iOS project. Skipping...")

    # ----- Android IAP -----
    if android_iap:
        if "lua" in options:
            create_lua_iap(android_iap, cocos)
    else:
        print("No IAP configured for Android project. Skipping...")

    # ----- iOS Royal Ad Network -----
    if ios_royal:
        if "lua" in options:
            create_lua_royal(ios_royal, cocos)
    else:
        print("No Royal Ad Network configured for iOS project. Skipping...")

    # ----- Android Royal Ad Network -----
    if android_royal:
        if "lua" in options:
            create_lua_royal(android_royal, cocos)
    else:
        print("No Royal Ad Network configured for Android project. Skipping...")

    if "project" in options:
        configure_cocos_targets(project, source, cocos, stage)
        configure_ios_targets(project, source, cocos, stage)
        configure_android_targets(android_mediation.getNetworks(), project, source, cocos, stage)
