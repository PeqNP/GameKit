#!/usr/bin/env python
#
# Downloads a GameKit project and all necessary dependencies.
#
# Dependencies include:
# - GameKit Cocos2d-x repository.
# - GameKit-Dependencies (AdColony, etc.)
#
# @copyright (c) 2016 Upstart Illustration LLC. All rights reserved.
#

import os
import sys
from datetime import datetime
from subprocess import call

from ugf import getversion, gethomedir
from ugf.config import configpath, checkconfig, Config, ProjectConfig
from ugf.pathbuilder import CocosPathBuilder, ProjectPathBuilder

VERSION = getversion(__file__, "1.0.0")

def download_project(config, cocos, git_url):
    project_name = os.path.basename(git_url).rstrip(".git")
    project_path = cocos.path(project_name)
    if os.path.exists(project_path):
        print("The GameKit project {} is already downloaded. Skipping step.".format(project_path))
        print("NOTE: If the project is corrupt, etc., delete the project's folder and run this command again.")
        print
        yn = input("Do you want to continue downloading dependencies? [Y/n]")
        if yn.lower() == "n":
            sys.exit(0)
    print("Cloning project {} from {}...".format(project_path, git_url))
    sys.exit(0)
    call(["git", "clone", git_url])
    source = ProjectPathBuilder(config)
    project = ProjectConfig.load(source.configpath())
    download_cocos(config, cocos, project)

def download_cocos(config, cocos, project):
    print("Downloading project ({}) Cocos2d-x version ({}) from remote ({})".format(project.name, project.cocos, config.remote))
    # @todo Determine if repository already exists. Prevent it from being downloaded if
    # it aleady is.
    cocospath = cocos.basepath()
    if os.path.exists(cocospath):
        print("STOP: Cocos2d-x v({}) already exists at ({})".format(cocos.version, cocospath))
        print("If you want a clean version of this repository, run gk-clean")
        print
        sys.exit(0)
    remote = config.remote[-1] == "/" and config.remote or config.remote + "/"
    remotepath = remote+cocos.foldername()
    print("Cloning ({}) to ({})".format(remotepath, cocospath))
    os.chdir(config.basepath)
    call(["git", "clone", remotepath])

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="GameKit Project Downloader - Download a GameKit project and all dependencies")
    parser.add_argument("project_url", help="The Git URL for the GameKit project to download.")
    args = parser.parse_args()

    print("{}, Time: {}".format(VERSION, str(datetime.now())))
    print

    config = Config.load(configpath())
    checkconfig(config)
    cocos = CocosPathBuilder(config, version)
    download_project(config, cocos, args.project_url)
