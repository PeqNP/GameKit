#!/usr/bin/env python
#
# Downloads a GameKit project and all necessary dependencies.
#
# Dependencies include:
# - GameKit graphics library (i.e. Cocos2d-x).
# - GameKit-Dependencies (AdColony, etc.)
#
# @copyright (c) 2016 Upstart Illustration LLC. All rights reserved.
#

import os
import sys
from datetime import datetime
from subprocess import call

from gamekit import getversion, gethomedir
from gamekit.config import configpath, checkconfig, get_app_types, Config, ProjectConfig
from gamekit.pathbuilder import get_graphics_path_builder, ProjectPathBuilder

VERSION = getversion(__file__, "1.0.0")

def get_app_type(project_path):
    # @todo Determine if there are any app types for this game. List all the
    # app types (free, premiumt, etc.). If there are none, proceed forward.
    app_types = get_app_types(project_path)
    if not app_types: return None
    while True:
        print("Found {} app types:".format(len(app_types)))
        for idx, app_type in enumerate(app_types):
            print(" {}. {}".format(idx+1, app_type))
        app_type_index = raw_input("Which app type config do you want to load (# 1-{})? ".format(len(app_types)))
        idx = int(app_type_index) - 1
        if idx > -1 and idx < len(app_types):
            return app_types[idx]
        else:
            print("Invalid option: {}".format(app_type_index))

def get_git_url():
    while True:
        print("What is the Git URL for your project?")
        url = raw_input("Git URL: ")
        if url:
            return url
        else:
            print("Invalid URL.")
            print

def download_project(config, project_name, git_url=None, suppress_warnings=False):
    project_path = config.path(project_name)
    if not suppress_warnings and os.path.exists(project_path):
        print("The GameKit project ({}) is already downloaded. Skipping step.".format(project_path))
        print("NOTE: If the project is corrupt, etc., delete the project's folder and run this command again.")
        print
        yn = raw_input("Do you want to continue downloading dependencies? [Y/n] ")
        if yn.lower() == "n":
            sys.exit(0)
    elif not os.path.exists(project_path):
        git_url = git_url and git_url or get_git_url()
        print("Cloning project ({}) from ({})...".format(project_name, git_url))
        os.chdir(config.basepath)
        call(["git", "clone", git_url])

def download_cocos(config, cocos, suppress_warnings=False):
    cocospath = cocos.basepath()
    if not suppress_warnings and os.path.exists(cocospath):
        print("Graphics lib {} v({}) already exists at ({})!".format(cocos.name, cocos.version, cocospath))
        print("If you want a clean version of this repository, run gk-clean.")
        print("If the repository is corrupt, delete the folder and run this command again.")
        print
        sys.exit(0)
    elif os.path.exists(cocospath):
        sys.exit(0)
    print("Downloading {} v{}...".format(cocos.name, cocos.version))
    remotepath = config.giturl(cocos.foldername())
    print("Cloning ({}) to ({})".format(remotepath, cocospath))
    os.chdir(config.basepath)
    call(["git", "clone", remotepath])

def main(project_name, app_type, git_url, suppress_warnings):
    config = Config.load(configpath())
    # Download project
    download_project(config, project_name, git_url=git_url, suppress_warnings=suppress_warnings)
    # Set config with latest vars. This is necessary to load the project's
    # respective config w/ app type.
    config.project = args.project_name
    config.apptype = app_type and app_type or get_app_type(config.path(project_name))
    # Download dependencies
    source = ProjectPathBuilder(config)
    project = ProjectConfig.load(source.configpath())
    cocos = get_graphics_path_builder(config, project.graphics)
    download_cocos(config, cocos, suppress_warnings=suppress_warnings)

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="GameKit Project Downloader - Download a GameKit project and all dependencies")
    parser.add_argument("project_name", help="The name of the project")
    parser.add_argument('--app-type', help="The type of project (i.e. free, premium) This determines which config and resource files to copy", default=None)
    parser.add_argument('--git-url', help="The Git URL to clone project from", default=None)
    parser.add_argument('--suppress-warnings', help="The Git URL to clone project from", action="store_true", default=False)
    args = parser.parse_args()

    print("{}, Time: {}".format(VERSION, str(datetime.now())))
    print

    main(args.project_name, args.app_type, args.git_url, args.suppress_warnings)
