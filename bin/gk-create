#!/usr/bin/env python
#
# Creates a new GameKit project.
#
# @copyright (c) 2016 Upstart Illustration LLC. All rights reserved.
#

from datetime import datetime
from subprocess import call

import os
import shutil
import sys

from gamekit import getversion
from gamekit.config import configpath, checkconfig, Config, ProjectConfig
from gamekit.pathbuilder import GameKitPathBuilder, ProjectPathBuilder
from gamekit.interpolator import SimpleInterpolator

VERSION = getversion(__file__, "1.0.0")

LATEST_SUPPORTED_COCOS_VERSION = "3.8.1"

# Creates the project's config.json file.
def create_config(source, dest, project, orientation=None):
    keys = {
        "##UGF-COCOS-VERSION##": LATEST_SUPPORTED_COCOS_VERSION,
        "##UGF-PROJECT-NAME##": project
    }
    # @todo Add orientation to config
    interpolator = SimpleInterpolator(keys)
    interpolator.interpolate(source, dest)

def create_configs(source, project, app_types, orientation):
    if app_types:
        for app_type in app_types:
            shutil.copy(source.path("config.json"), source.path("config-{}.json".format(app_type)))
            create_config(source.path("config-{}.json".format(app_type)), source.path("config-{}.json".format(app_type)), project, orientation)
        os.unlink(source.path("config.json"))
    else:
        create_config(source.path("config.json"), source.path("config.json"), project, orientation)

# Copies all of the contents in GameKit/template to the new project's path.
def copy_files(gamekit, source):
    shutil.copytree(gamekit.templatepath(), source.basepath())

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="GameKit - Creates a new GameKit project")
    parser.add_argument('project', help="Name of the new GameKit project")
    parser.add_argument('--app-types', help="Comma delimated list of app types. e.g. free,premium")
    parser.add_argument('--orientation', help="Orientation of game. Options are (portrait, landscape). Default: portrait")
    args = parser.parse_args()

    print("{}, Time: {}".format(VERSION, str(datetime.now())))

    config = Config.load(configpath())
    config.project = args.project
    checkconfig(config)

    source = ProjectPathBuilder(config)
    gamekit = GameKitPathBuilder(config)

    if os.path.exists(source.basepath()):
        print("Project ({}) already exists at path ({})".format(args.project, source.basepath()))
        sys.exit(1)

    print("Creating project ({}) at path ({})".format(args.project, source.basepath()))

    app_types = args.app_types and args.app_types.split(",") or None

    copy_files(gamekit, source)
    create_configs(source, args.project, app_types, args.orientation)
    print("Please modify this project's config file(s), located at ({}), before selecting the project.".format(source.basepath()))
    sys.exit(0)
