#!/usr/bin/env python
#
# Selects (configures) a project into a Cocos2d-x project.
#
# @copyright 2015 Upstart Illustration LLC. All rights reserved.
#

from datetime import datetime
from subprocess  import call

import os
import re
import shutil
import sys

from ugf import gethomedir
from ugf.config import Config, ProjectConfig
from ugf.selectoptions import SelectOptions
from ugf.pathbuilder import CocosPathBuilder, StagePathBuilder, ProjectPathBuilder
from ugf.interpolator import Interpolator

def interpolate_iospbxproj(project, blob):
    # Global
    blob = re.sub("productName = GameTools;", "productName = {};".format(project.executable), blob)
    blob = re.sub("PRODUCT_BUNDLE_IDENTIFIER = com.upstartillustration.GameTools;", "PRODUCT_BUNDLE_IDENTIFIER = {};".format(project.bundle), blob)
    # Mobile
    blob = re.sub("GameTools-mobile.app", "{}-mobile.app".format(project.executable), blob)
    blob = re.sub("\/\* GameTools-mobile \*\/", "/* {}-mobile */".format(project.executable), blob)
    blob = re.sub('"GameTools-mobile"', '"{}-mobile"'.format(project.executable), blob)
    # Desktop
    blob = re.sub("GameTools-desktop.app", "{}-desktop.app".format(project.executable), blob)
    blob = re.sub("\/\* GameTools-desktop \*\/", "/* {}-desktop */".format(project.executable), blob)
    blob = re.sub('"GameTools-desktop"', '"{}-desktop"'.format(project.executable), blob)
    # Final global (order matters...)
    blob = re.sub('"GameTools"', '"{}"'.format(project.executable), blob)
    return blob

def interpolate_iosplist(project, blob):
    c = None
    # Orientation
    if project.orientation == "landscape":
        c = """<string>UIInterfaceOrientationLandscapeRight</string>
        <string>UIInterfaceOrientationLandscapeLeft</string>"""
    else:
        c = """<string>UIInterfaceOrientationPortrait</string>"""
    blob = re.sub("##UGF-ORIENTATION-IOS##", c, blob)
    return blob

def copy_source(source, cocos):
    call(["rm", "-rf", cocos.path("src/game")])
    call(["cp", "-r", source.path("src"), cocos.path("src/game")])

# Select and make 'project' the active project.
def main(project, source, cocos, options):
    stage = StagePathBuilder(cocos.basepath())

    # Load and save any changes made to the project to the current project
    # NOTE: I'm not sure this is necessary.

    # Load the target project - config.json

    # Save the target project as the current project
    # NOTE: I'm not sure this is necessary.

    # If the project does not exist, take the template for the given version of Cocos2d-x and replace all
    # instances of the template name 'GameTools' with the target app's name.

    # Interpolate template files: (The app will raise an exception if the files below do not contain the tags)

    if not os.path.exists(stage.basepath()):
        os.makedirs(stage.basepath())

    keys = {
        "##UGF-APP-BUNDLE##": project.bundle
      , "##UGF-APP-NAME##": project.name
      , "##UGF-APP-VERSION##": project.version
      , "##UGF-APP-BUILD##": project.build
      , "##UGF-EXECUTABLE##": project.executable
      , "##UGF-HOCKEY-APP-ID##": project.hockeyappid
      , "##UGF-FACEBOOK-ID##": project.facebookid
      , "##UGF-DESIGN-WIDTH##": project.design["width"]
      , "##UGF-DESIGN-HEIGHT##": project.design["height"]
      , "##UGF-SHOW-FPS##": "false"
      , "##UGF-ORIENTATION##": project.orientation
    }

    # The pbxproj does not need to be a template.
    shutil.copyfile(cocos.iosprojectpath(), stage.path("project.pbxproj"))

    interpolator = Interpolator(project, cocos, stage, keys)
    interpolator.interpolate("templates/ios/Info.plist", "frameworks/runtime-src/proj.ios_mac/ios/Info.plist", interpolate_iosplist)
    interpolator.interpolate("templates/ios/AppConfig.h", "frameworks/runtime-src/proj.ios_mac/ios/AppConfig.h")
    interpolator.interpolate("templates/config.lua", "src/config.lua")
    interpolator.interpolate("stage/project.pbxproj", "frameworks/runtime-src/proj.ios_mac/GameTools.xcodeproj/project.pbxproj", interpolate_iospbxproj)

    # @todo Cleanup stage directory

    # @todo The orientation config may need to be specific to files so that
    # operations are checked correctly, but also that some options are removed!

    # Copy interpolated file to correct location.

    # Copy Xcode assets
    call(["rm", "-rf", cocos.path("frameworks/runtime-src/proj.ios_mac/GameTools-mobile/*")])
    call(["cp", "-r", source.resourcepath(), cocos.path("frameworks/runtime-src/proj.ios_mac/GameTools-mobile/")])

    # Copy Android assets

    # Copy GameTools
    call(["rm", "-rf", cocos.path("src/ugf")])
    call(["cp", "-r", "/Users/eric/git/GameTools/src", cocos.path("src/ugf")])

    # Copy game source and assets
    copy_source(source, cocos)

    # Copy resources
    call(["rm", "-rf", cocos.path("res")])
    call(["cp", "-r", source.path("res"), cocos.path("res")])

    # Update a compile time script that will call this script with the currently selected project before build
    # so that all of the latest code is copied. (???)

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Upstart Game Framework - Configure a project to build for specific version of Cocos2d-x")
    parser.add_argument('project', help="The project name to configure")
    parser.add_argument('--resource', help="Select the resource to use for project's icons and launch images (i.e. free, premium)", default=None)
    # should only be boolean
    parser.add_argument('--copy-source', help="Copies only the source files (src directory)", action="store_true", default=False)
    args = parser.parse_args()

    config = Config.load(os.path.join(gethomedir(), ".ugf"))
    options = SelectOptions(args.resource and args.resource or "", args.copy_source)
    source = ProjectPathBuilder(config, args.project, options)
    project = ProjectConfig.load(source.configpath())
    cocos = CocosPathBuilder(config, project.cocos)

    print("ugf-select v1.0.0, Time: {}".format(str(datetime.now())))
    print("Project: {} v{} b{}".format(project.name, project.version, project.build))
    if len(options.resource) > 0:
        print("Resource: {}".format(options.resource))

    if args.copy_source:
        print("Copying source files only...")
        copy_source(source, cocos)
    else:
        main(project, source, cocos, options)
