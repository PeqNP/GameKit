#!/usr/bin/env python
#
# Selects (configures) a project into a Cocos2d-x project.
#
# @copyright 2015 Upstart Illustration LLC. All rights reserved.
#

from datetime import datetime
from subprocess  import call

import os
import re
import shutil
import sys

from ugf.config import configpath, Config, ProjectConfig
from ugf.pathbuilder import CocosPathBuilder, StagePathBuilder, ProjectPathBuilder
from ugf.interpolator import Interpolator

def interpolate_iospbxproj(project, blob):
    # Global
    blob = re.sub("productName = GameTools;", "productName = {};".format(project.executable), blob)
    blob = re.sub("PRODUCT_BUNDLE_IDENTIFIER = com.upstartillustration.GameTools;", "PRODUCT_BUNDLE_IDENTIFIER = {};".format(project.bundle), blob)
    # Mobile
    blob = re.sub("GameTools-mobile.app", "{}-mobile.app".format(project.executable), blob)
    blob = re.sub("\/\* GameTools-mobile \*\/", "/* {}-mobile */".format(project.executable), blob)
    blob = re.sub('"GameTools-mobile"', '"{}-mobile"'.format(project.executable), blob)
    # Desktop
    blob = re.sub("GameTools-desktop.app", "{}-desktop.app".format(project.executable), blob)
    blob = re.sub("\/\* GameTools-desktop \*\/", "/* {}-desktop */".format(project.executable), blob)
    blob = re.sub('"GameTools-desktop"', '"{}-desktop"'.format(project.executable), blob)
    # Final global (order matters...)
    blob = re.sub('"GameTools"', '"{}"'.format(project.executable), blob)
    return blob

def interpolate_iosplist(project, blob):
    c = None
    # Orientation
    if project.orientation == "landscape":
        c = """<string>UIInterfaceOrientationLandscapeRight</string>
        <string>UIInterfaceOrientationLandscapeLeft</string>"""
    else:
        c = """<string>UIInterfaceOrientationPortrait</string>"""
    blob = re.sub("##UGF-ORIENTATION##", c, blob)
    return blob

def interpolate_configjson(project, blob):
    isLandscape = project.orientation == "landscape" and "true" or "false"
    blob = re.sub("##UGF-ORIENTATION##", isLandscape, blob)
    return blob

# Select and make 'project' the active project.
def main(project, source, cocos):
    stage = StagePathBuilder(cocos.basepath())

    # Load and save any changes made to the project to the current project
    # NOTE: I'm not sure this is necessary.

    # Save the target project as the current project
    # NOTE: I'm not sure this is necessary.

    # Interpolate template files

    if not os.path.exists(stage.basepath()):
        os.makedirs(stage.basepath())

    keys = {
        "##UGF-APP-BUNDLE##": project.bundle
      , "##UGF-APP-NAME##": project.name
      , "##UGF-APP-VERSION##": project.version
      , "##UGF-APP-BUILD##": project.build
      , "##UGF-EXECUTABLE##": project.executable
      , "##UGF-HOCKEY-APP-ID##": project.hockeyappid
      , "##UGF-FACEBOOK-ID##": project.facebookid
      , "##UGF-DESIGN-WIDTH##": project.design["width"]
      , "##UGF-DESIGN-HEIGHT##": project.design["height"]
      , "##UGF-SHOW-FPS##": "false"
    }

    # The pbxproj should not be a template, as it changes often. All replacements
    # can be done by replacing GameTools anyways.
    shutil.copyfile(cocos.iosprojectpath(), stage.path("project.pbxproj"))

    interpolator = Interpolator(project, cocos, stage, keys)
    interpolator.interpolate("templates/project/ios/Info.plist", "frameworks/runtime-src/proj.ios_mac/ios/Info.plist", interpolate_iosplist)
    interpolator.interpolate("templates/project/ios/AppConfig.h", "frameworks/runtime-src/proj.ios_mac/ios/AppConfig.h")
    interpolator.interpolate("templates/config.json", "config.json", interpolate_configjson)
    interpolator.interpolate("templates/project/config.lua", "src/config.lua")
    interpolator.interpolate("stage/project.pbxproj", "frameworks/runtime-src/proj.ios_mac/GameTools.xcodeproj/project.pbxproj", interpolate_iospbxproj)

    # @todo Cleanup stage directory

    # @todo The orientation config may need to be specific to files so that
    # operations are checked correctly, but also that some options are removed!

    # Copy interpolated file to correct location.
    call(["ugf-copy"])

    # Update a compile time script that will call this script with the currently selected project before build
    # so that all of the latest code is copied. (???)

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Upstart Game Framework - Configure a project to build for specific version of Cocos2d-x")
    parser.add_argument('project', help="The project name to configure")
    parser.add_argument('--resource', help="The project's platform resources (icons and launch images) to copy (i.e. free, premium)", default=None)
    args = parser.parse_args()

    config = Config.load(configpath(), args.project, args.resource)
    config.save(configpath())

    source = ProjectPathBuilder(config)
    project = ProjectConfig.load(source.configpath())
    cocos = CocosPathBuilder(config, project.cocos)

    print("ugf-select v1.1.0, Time: {}".format(str(datetime.now())))
    print("Project: {} v{} b{}".format(project.name, project.version, project.build))
    main(project, source, cocos)

