#!/usr/bin/env python
#
# Selects (configures) a project into a Cocos2d-x project.
#
# @copyright 2015 Upstart Illustration LLC. All rights reserved.
#

from datetime import datetime
from subprocess import call

import os
import re
import shutil
import sys

from ugf.config import configpath, checkconfig, Config, ProjectConfig
from ugf.pathbuilder import CocosPathBuilder, StagePathBuilder, ProjectPathBuilder, AdKitPathBuilder
from ugf.interpolator import Interpolator
from ugf.mediation import load_mediation_config, pods_for_networks, lua_for_networks

VERSION = "ugf-configure v1.0.0"

def interpolate_iospbxproj(project, blob):
    # Global
    blob = re.sub("productName = GameTools;", "productName = {};".format(project.executable), blob)
    blob = re.sub("PRODUCT_BUNDLE_IDENTIFIER = com.upstartillustration.GameTools;", "PRODUCT_BUNDLE_IDENTIFIER = {};".format(project.bundle), blob)
    # Mobile
    blob = re.sub("GameTools-mobile.app", "{}-mobile.app".format(project.executable), blob)
    blob = re.sub("\/\* GameTools-mobile \*\/", "/* {}-mobile */".format(project.executable), blob)
    blob = re.sub('"GameTools-mobile"', '"{}-mobile"'.format(project.executable), blob)
    # Desktop
    blob = re.sub("GameTools-desktop.app", "{}-desktop.app".format(project.executable), blob)
    blob = re.sub("\/\* GameTools-desktop \*\/", "/* {}-desktop */".format(project.executable), blob)
    blob = re.sub('"GameTools-desktop"', '"{}-desktop"'.format(project.executable), blob)
    # Final global (order matters...)
    blob = re.sub('"GameTools"', '"{}"'.format(project.executable), blob)
    return blob

def interpolate_iosplist(project, blob):
    c = None
    # Orientation
    if project.orientation == "landscape":
        c = """<string>UIInterfaceOrientationLandscapeRight</string>
        <string>UIInterfaceOrientationLandscapeLeft</string>"""
    else:
        c = """<string>UIInterfaceOrientationPortrait</string>"""
    blob = re.sub("##UGF-ORIENTATION##", c, blob)
    return blob

def interpolate_configjson(project, blob):
    isLandscape = project.orientation == "landscape" and "true" or "false"
    blob = re.sub("##UGF-ORIENTATION##", isLandscape, blob)
    return blob

def interpolate_projectconfig(project, blob):
    return re.sub("##UGF-ORIENTATION##", project.orientation, blob)

def configure_ios_pods(networks, project, cocos, stage):
    # Add mediation networks to Podfile
    pods = pods_for_networks(networks)
    keys = {
        "##UGF-EXECUTABLE##": project.executable
      , "##UGF-MEDIATION-DEPENDENCIES##": "    " + "\n    ".join(pods)
    }
    interpolator = Interpolator(project, cocos, stage, keys)
    interpolator.interpolate("templates/project/ios/Podfile", "frameworks/runtime-src/proj.ios_mac/Podfile")

# Copies AdKit source files for only the mediation networks that have been selected.
def copy_adkit_sources(networks, cocos, adkit):
    # Copy entire directory to Frameworks
    adkitsrc = adkit.sourcedir()
    if not os.path.isdir(adkitsrc):
        raise Exception("AdKit source files are expected to be at '{}'".format(adkitsrc))
    adkitdest = cocos.iosmacprojpath("AdKit")
    if os.path.isdir(adkitdest):
        shutil.rmtree(adkitdest)
    shutil.copytree(adkitsrc, adkitdest)
    # Remove any network folder that is not in the list of frameworks for this project.
    networkdir = os.path.join(adkitdest, "Networks")
    availNetworks = os.listdir(networkdir)
    for network in availNetworks:
        found = None
        for n in networks:
            if network == n.name:
                found = network
                break
        if not found:
            removepath = os.path.join(networkdir, network)
            shutil.rmtree(removepath)
    os.chdir(cocos.iosmacprojpath())
    call(["./add_adkit_files.rb"])

def configure_supported_networks_header(networks, cocos):
    defines = []
    for network in networks:
        defines.append("#define UGF_{}".format(network.name.upper()))
    keys = {
        "##UGF-MEDIATION-DEPENDENCIES##": "\n".join(defines)
    }
    interpolator = Interpolator(project, cocos, stage, keys)
    interpolator.interpolate("templates/project/ios/SupportedNetworks.h", cocos.iosmacprojpath("AdKit/GameTools/SupportedNetworks.h"))

def create_lua_mediation(mediation, networks, cocos):
    lua_networks = lua_for_networks(networks)
    lua_require = []
    for network in networks:
        lua_require.append("require \"ad.networks.{}Network\"".format(network.name))
    lua = """
--
-- Auto-generated by {} @ {}
--

require "ad.Constants"
require "ad.Ad"
{}

local adConfig = {}
local networks = {{
    {}
}}
return adConfig, networks
    """.format(VERSION, datetime.now(), "\n".join(lua_require), mediation.toLua(), ",\n    ".join(lua_networks))
    fh = open(cocos.mediationluapath("ios"), "w")
    fh.write(lua)
    fh.close()

def load_mediation(source, platform):
    path = source.mediationpath(platform)
    try:
        return load_mediation_config(path)
    except Exception, exc:
        print(exc)
        return None, None

# Select and make 'project' the active project.
def configure_ios_targets(project, source, cocos, stage):

    # Load and save any changes made to the project to the current project
    # NOTE: I'm not sure this is necessary.

    # Save the target project as the current project
    # NOTE: I'm not sure this is necessary.

    # Interpolate template files
    keys = {
        "##UGF-APP-BUNDLE##": project.bundle
      , "##UGF-APP-NAME##": project.name
      , "##UGF-APP-VERSION##": project.version
      , "##UGF-APP-BUILD##": project.build
      , "##UGF-EXECUTABLE##": project.executable
      , "##UGF-HOCKEY-APP-ID##": project.hockeyappid
      , "##UGF-FACEBOOK-ID##": project.facebookid
      , "##UGF-DESIGN-WIDTH##": project.design["width"]
      , "##UGF-DESIGN-HEIGHT##": project.design["height"]
      , "##UGF-SHOW-FPS##": "false"
    }

    # The pbxproj should not be a template, as it changes often. All replacements
    # can be done by replacing GameTools anyways.
    shutil.copyfile(cocos.iosprojectpath(), stage.path("project.pbxproj"))

    interpolator = Interpolator(project, cocos, stage, keys)
    interpolator.interpolate("templates/project/ios/Info.plist", "frameworks/runtime-src/proj.ios_mac/ios/Info.plist", interpolate_iosplist)
    interpolator.interpolate("templates/project/ios/AppConfig.h", "frameworks/runtime-src/proj.ios_mac/ios/AppConfig.h")
    interpolator.interpolate("templates/config.json", "config.json", interpolate_configjson)
    interpolator.interpolate("templates/project/config.lua", "src/config.lua", interpolate_projectconfig)
    interpolator.interpolate("stage/project.pbxproj", "frameworks/runtime-src/proj.ios_mac/GameTools.xcodeproj/project.pbxproj", interpolate_iospbxproj)

    # @todo Cleanup stage directory

    # @todo The orientation config may need to be specific to files so that
    # operations are checked correctly, but also that some options are removed!

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Upstart Game Framework - Configures a project into a Cocos2d-x project")
    parser.add_argument('operations', help="Configuration processes to perform on project", nargs="*", default=["all"])
    args = parser.parse_args()

    print("{}, Time: {}".format(VERSION, str(datetime.now())))

    operations = ["mediation", "lua", "adkit", "project"]
    valid_operations = ["all"] + operations
    for option in args.operations:
        if option not in valid_operations:
            print("Invalid configure option '{}'. Valid operations are: {}".format(option, ", ".join(valid_operations)))
            sys.exit(1)

    options = "all" in args.operations and operations or args.operations

    config = Config.load(configpath())
    checkconfig(config)

    source = ProjectPathBuilder(config)
    project = ProjectConfig.load(source.configpath())
    cocos = CocosPathBuilder(config, project.cocos)
    adkit = AdKitPathBuilder(config)
    stage = StagePathBuilder(cocos.basepath())
    mediation, networks = load_mediation(source, "ios")

    if not os.path.exists(stage.basepath()):
        os.makedirs(stage.basepath())

    if mediation and networks:
        if "mediation" in options:
            configure_ios_pods(networks, project, cocos, stage)
        if "lua" in options:
            create_lua_mediation(mediation, networks, cocos)
        if "adkit" in options:
            copy_adkit_sources(networks, cocos, adkit)
            configure_supported_networks_header(networks, cocos)
    else:
        print("No mediation networks configured for project. Skipping all mediation network related configuration.")

    if "project" in options:
        configure_ios_targets(project, source, cocos, stage)
