#!/usr/bin/env python
#
# Selects (configures) a project into a Cocos2d-x project.
#
# @copyright 2015 Upstart Illustration LLC. All rights reserved.
#

from datetime import datetime
from subprocess import call

import os
import re
import shutil
import sys

from ugf.config import configpath, checkconfig, Config, ProjectConfig
from ugf.pathbuilder import CocosPathBuilder, StagePathBuilder, ProjectPathBuilder, iOS_GameKitPathBuilder
from ugf.interpolator import Interpolator
from ugf.mediation import load_mediation_config, load_iap_config, load_royal_config, pods_for_networks, lua_for_networks

VERSION = "ugf-configure v1.0.0"

def interpolate_iospbxproj(project, blob):
    # Global
    blob = re.sub("productName = GameTools;", "productName = {};".format(project.executable), blob)
    blob = re.sub("PRODUCT_BUNDLE_IDENTIFIER = com.upstartillustration.GameTools;", "PRODUCT_BUNDLE_IDENTIFIER = {};".format(project.bundle), blob)
    # Mobile
    blob = re.sub("GameTools-mobile.app", "{}-mobile.app".format(project.executable), blob)
    blob = re.sub("\/\* GameTools-mobile \*\/", "/* {}-mobile */".format(project.executable), blob)
    blob = re.sub('"GameTools-mobile"', '"{}-mobile"'.format(project.executable), blob)
    # Desktop
    blob = re.sub("GameTools-desktop.app", "{}-desktop.app".format(project.executable), blob)
    blob = re.sub("\/\* GameTools-desktop \*\/", "/* {}-desktop */".format(project.executable), blob)
    blob = re.sub('"GameTools-desktop"', '"{}-desktop"'.format(project.executable), blob)
    # Final global (order matters...)
    blob = re.sub('"GameTools"', '"{}"'.format(project.executable), blob)
    return blob

def interpolate_iosplist(project, blob):
    c = None
    # Orientation
    if project.orientation == "landscape":
        c = """<string>UIInterfaceOrientationLandscapeRight</string>
        <string>UIInterfaceOrientationLandscapeLeft</string>"""
    else:
        # @fixme Portrait is required to support landscape in order for AdColony
        # ad SDK to not crash the app after an ad has been displayed.
        c = """<string>UIInterfaceOrientationLandscapeRight</string>
        <string>UIInterfaceOrientationLandscapeLeft</string>
        <string>UIInterfaceOrientationPortrait</string>"""
    blob = re.sub("##UGF-ORIENTATION##", c, blob)
    # Facebook ID
    if project.facebookid:
        c = """<key>CFBundleURLTypes</key>
        <array>
            <dict>
                <key>CFBundleURLSchemes</key>
                <array>
                    <string>fb{}</string>
                </array>
            </dict>
        </array>
        <key>FacebookAppID</key>
        <string>{}</string>
        <key>FacebookDisplayName</key>
        <string>Blobfish Evolution</string>""".format(project.facebookid, project.facebookid)
        blob = re.sub("##UGF-FACEBOOK##", c, blob)
    return blob

def interpolate_configjson(project, blob):
    isLandscape = project.orientation == "landscape" and "true" or "false"
    blob = re.sub("##UGF-ORIENTATION##", isLandscape, blob)
    return blob

def interpolate_projectconfig(project, blob):
    return re.sub("##UGF-ORIENTATION##", project.orientation, blob)

def configure_sdk_dependencies(project, cocos, stage):
    defines = []
    if project.facebookid:
        defines.append("#define FACEBOOK_ENABLED")
    if project.hockeyappid:
        defines.append("#define HOCKEYAPP_ENABLED")
    keys = {
        "##UGF-SDK-DEPENDENCIES##": "\n".join(defines)
    }
    interpolator = Interpolator(project, cocos, stage, keys)
    interpolator.interpolate("templates/project/ios/GKConfig.h", cocos.iosmacprojpath("GameKit/GameTools/GKConfig.h"))

def configure_ios_pods(networks, project, cocos, stage):
    # Add mediation networks to Podfile
    pods = pods_for_networks(networks)
    keys = {
        "##UGF-EXECUTABLE##": project.executable
      , "##UGF-MEDIATION-DEPENDENCIES##": "    " + "\n    ".join(pods)
    }
    interpolator = Interpolator(project, cocos, stage, keys)
    interpolator.interpolate("templates/project/ios/Podfile", "frameworks/runtime-src/proj.ios_mac/Podfile")

# Copies GameKit-iOS source files for only the mediation networks that have been selected.
def copy_adkit_sources(networks, cocos, adkit):
    # Copy entire directory to Frameworks
    adkitsrc = adkit.sourcedir()
    if not os.path.isdir(adkitsrc):
        raise Exception("GameKit source files are expected to be at '{}'".format(adkitsrc))
    adkitdest = cocos.iosmacprojpath("GameKit")
    if os.path.isdir(adkitdest):
        shutil.rmtree(adkitdest)
    shutil.copytree(adkitsrc, adkitdest)
    # Remove any network folder that is not in the list of frameworks for this project.
    networkdir = os.path.join(adkitdest, "Networks")
    availNetworks = os.listdir(networkdir)
    for network in availNetworks:
        found = None
        for n in networks:
            if network == n.name:
                found = network
                break
        if not found:
            removepath = os.path.join(networkdir, network)
            shutil.rmtree(removepath)
    os.chdir(cocos.iosmacprojpath())
    call(["./add_gamekit_files.rb"])

def configure_supported_networks_header(networks, cocos):
    defines = []
    for network in networks:
        defines.append("#define UGF_{}".format(network.name.upper()))
    keys = {
        "##UGF-MEDIATION-DEPENDENCIES##": "\n".join(defines)
    }
    interpolator = Interpolator(project, cocos, stage, keys)
    interpolator.interpolate("templates/project/ios/SupportedNetworks.h", cocos.iosmacprojpath("GameKit/GameTools/AdKit/SupportedNetworks.h"))

def create_lua_mediation(platform, mediation, networks, mediationUrl, cocos):
    lua_networks = lua_for_networks(networks)
    lua_require = []
    for network in networks:
        lua_require.append("local {}Network = require(\"ad.network.{}Network\")".format(network.name, network.name))
    lua = """--
-- Mediation network configuration file.
--
-- Auto-generated by {} @ {}
--

require "ad.Constants"
local AdConfig = require("ad.Config")
local Ad = require("ad.Ad")
{}

local url = "{}"
local adConfig = {}
local networks = {{
    {}
}}
return {{adConfig, networks, url}}
    """.format(VERSION, datetime.now(), "\n".join(lua_require), mediation.toLua(), ",\n    ".join(lua_networks), mediationUrl)
    fh = open(cocos.mediationluapath(platform), "w")
    fh.write(lua)
    fh.close()

def load_mediation(platform, source):
    path = source.mediationpath(platform)
    try:
        return load_mediation_config(path)
    except Exception, exc:
        print(exc)
        return None, None, None

def create_lua_iap(platform, iap, cocos):
    lua_tickets = []
    for ticket in iap:
        lua_tickets.append(ticket.toLua())
    lua = """--
-- IAP configuration file.
--
-- Auto-generated by {} @ {}
--

local Ticket = require("iap.Ticket")

local iap = {{
    {}
}}

return iap
    """.format(VERSION, datetime.now(), ",\n    ".join(lua_tickets))
    fh = open(cocos.iapluapath(platform), "w")
    fh.write(lua)
    fh.close()

def load_iap(platform, source):
    path = source.iappath(platform)
    try:
        return load_iap_config(path)
    except Exception, exc:
        return None

def create_lua_royal(platform, royal, cocos):
    lua = """--
-- Royal Ad Network configuration file.
--
-- Auto-generated by {} @ {}
--

local url = "{}"

return url
    """.format(VERSION, datetime.now(), royal.getURL())
    fh = open(cocos.royalluapath(platform), "w")
    fh.write(lua)
    fh.close()

def load_royal(platform, source):
    path = source.royalpath(platform)
    try:
        return load_royal_config(path)
    except Exception, exc:
        #print(exc)
        return None

#
# Copy mediation.config.json to Cocos2d-x res/ directory.
#
# @note This won't work as we can't load resources from code. It's staying here until
# I can figure out how to turn the default configuration into a Lua file; which seems
# to be way more work than what is necessary.
#
def copy_mediation_config(platform, source, cocos):
    source = source.mediationconfigpath(platform)
    if os.path.exists(source):
        shutil.copyfile(source, cocos.mediationconfigpath(platform))

# Select and make 'project' the active project.
def configure_ios_targets(project, source, cocos, stage):

    # Load and save any changes made to the project to the current project
    # NOTE: I'm not sure this is necessary.

    # Save the target project as the current project
    # NOTE: I'm not sure this is necessary.

    # Interpolate template files
    keys = {
        "##UGF-APP-BUNDLE##": project.bundle
      , "##UGF-APP-NAME##": project.name
      , "##UGF-APP-VERSION##": project.version
      , "##UGF-APP-BUILD##": project.build
      , "##UGF-EXECUTABLE##": project.executable
      , "##UGF-HOCKEY-APP-ID##": project.hockeyappid
      , "##UGF-FACEBOOK-ID##": project.facebookid
      , "##UGF-DESIGN-WIDTH##": project.design["width"]
      , "##UGF-DESIGN-HEIGHT##": project.design["height"]
      , "##UGF-SHOW-FPS##": "false"
    }

    # The pbxproj should not be a template, as it changes often. All replacements
    # can be done by replacing GameTools anyways.
    shutil.copyfile(cocos.iosprojectpath(), stage.path("project.pbxproj"))

    interpolator = Interpolator(project, cocos, stage, keys)
    interpolator.interpolate("templates/project/ios/Info.plist", cocos.iosmacprojpath("ios/Info.plist"), interpolate_iosplist)
    interpolator.interpolate("templates/config.json", "config.json", interpolate_configjson)
    interpolator.interpolate("templates/project/config.lua", "src/config.lua", interpolate_projectconfig)
    interpolator.interpolate("stage/project.pbxproj", cocos.iosmacprojpath("GameTools.xcodeproj/project.pbxproj"), interpolate_iospbxproj)
    interpolator.interpolate("templates/project/ios/GKConfig.m", cocos.iosmacprojpath("GameKit/GameTools/GKConfig.m"))

    # @todo Cleanup stage directory

    # @todo The orientation config may need to be specific to files so that
    # operations are checked correctly, but also that some options are removed!

if __name__ == "__main__":
    import argparse

    operations = ["dependencies", "lua", "adkit", "project"]

    parser = argparse.ArgumentParser(description="Upstart Game Framework - Configures a project into a Cocos2d-x project")
    parser.add_argument('operations', help="Configuration processes to perform on project: {}".format(", ".join(operations)), nargs="*", default=["all"])
    args = parser.parse_args()

    print("{}, Time: {}".format(VERSION, str(datetime.now())))

    valid_operations = ["all"] + operations
    for option in args.operations:
        if option not in valid_operations:
            print("Invalid configure option '{}'. Valid operations are: {}".format(option, ", ".join(valid_operations)))
            sys.exit(1)

    options = "all" in args.operations and operations or args.operations

    config = Config.load(configpath())
    checkconfig(config)

    source = ProjectPathBuilder(config)
    project = ProjectConfig.load(source.configpath())
    cocos = CocosPathBuilder(config, project.cocos)
    adkit = iOS_GameKitPathBuilder(config)
    stage = StagePathBuilder(cocos.basepath())
    mediation, networks, mediationUrl = load_mediation("ios", source)
    iap = load_iap("ios", source)
    royal = load_royal("ios", source)

    if not os.path.exists(stage.basepath()):
        os.makedirs(stage.basepath())

    if mediation and networks:
        if "dependencies" in options:
            configure_ios_pods(networks, project, cocos, stage)
        if "lua" in options:
            create_lua_mediation("ios", mediation, networks, mediationUrl, cocos)
            #copy_mediation_config("ios", source, cocos)
        if "adkit" in options:
            copy_adkit_sources(networks, cocos, adkit)
            configure_supported_networks_header(networks, cocos)
            configure_sdk_dependencies(project, cocos, stage)
    else:
        print("No mediation networks configured for project. Skipping...")

    if iap:
        if "lua" in options:
            create_lua_iap("ios", iap, cocos)
    else:
        print("No IAP configured for project. Skipping...")

    if royal:
        if "lua" in options:
            create_lua_royal("ios", royal, cocos)
    else:
        print("No Royal Ad Network configured for project. Skipping...")

    if "project" in options:
        configure_ios_targets(project, source, cocos, stage)
