#!/usr/bin/env python
#
# Selects (configures) a project into a Cocos2d-x project.
#
# @copyright 2015 Upstart Illustration LLC. All rights reserved.
#

from datetime import datetime
from subprocess  import call

import os
import re
import shutil
import sys

from ugf.config import configpath, checkconfig, Config, ProjectConfig
from ugf.pathbuilder import CocosPathBuilder, StagePathBuilder, ProjectPathBuilder
from ugf.interpolator import Interpolator
from ugf.mediation import load_mediation_config, pods_for_networks, lua_for_networks

VERSION = "ugf-configure v1.0.0"

def interpolate_iospbxproj(project, blob):
    # Global
    blob = re.sub("productName = GameTools;", "productName = {};".format(project.executable), blob)
    blob = re.sub("PRODUCT_BUNDLE_IDENTIFIER = com.upstartillustration.GameTools;", "PRODUCT_BUNDLE_IDENTIFIER = {};".format(project.bundle), blob)
    # Mobile
    blob = re.sub("GameTools-mobile.app", "{}-mobile.app".format(project.executable), blob)
    blob = re.sub("\/\* GameTools-mobile \*\/", "/* {}-mobile */".format(project.executable), blob)
    blob = re.sub('"GameTools-mobile"', '"{}-mobile"'.format(project.executable), blob)
    # Desktop
    blob = re.sub("GameTools-desktop.app", "{}-desktop.app".format(project.executable), blob)
    blob = re.sub("\/\* GameTools-desktop \*\/", "/* {}-desktop */".format(project.executable), blob)
    blob = re.sub('"GameTools-desktop"', '"{}-desktop"'.format(project.executable), blob)
    # Final global (order matters...)
    blob = re.sub('"GameTools"', '"{}"'.format(project.executable), blob)
    return blob

def interpolate_iosplist(project, blob):
    c = None
    # Orientation
    if project.orientation == "landscape":
        c = """<string>UIInterfaceOrientationLandscapeRight</string>
        <string>UIInterfaceOrientationLandscapeLeft</string>"""
    else:
        c = """<string>UIInterfaceOrientationPortrait</string>"""
    blob = re.sub("##UGF-ORIENTATION##", c, blob)
    return blob

def interpolate_configjson(project, blob):
    isLandscape = project.orientation == "landscape" and "true" or "false"
    blob = re.sub("##UGF-ORIENTATION##", isLandscape, blob)
    return blob

def interpolate_projectconfig(project, blob):
    return re.sub("##UGF-ORIENTATION##", project.orientation, blob)

def install_ios_dependencies(networks, project, cocos, stage):
    # Add mediation networks to Podfile
    pods = pods_for_networks(networks)
    keys = {
        "##UGF-EXECUTABLE##": project.executable
      , "##UGF-MEDIATION-DEPENDENCIES##": "    " + "\n    ".join(pods)
    }
    interpolator = Interpolator(project, cocos, stage, keys)
    interpolator.interpolate("templates/project/ios/Podfile", "frameworks/runtime-src/proj.ios_mac/Podfile")

def create_lua_mediation(networks, cocos):
    lua_networks = lua_for_networks(networks)
    lua_require = []
    for network in networks:
        lua_require.append("require \"ad.networks.{}Network\"".format(network.name))
    lua = """
--
-- Auto-generated by {} @ {}
--

require "ad.Constants"
require "ad.Ad"
{}

local networks = {{
    {}
}}
return networks
    """.format(VERSION, datetime.now(), "\n".join(lua_require), ",\n    ".join(lua_networks))
    fh = open(cocos.mediationluapath("ios"), "w")
    fh.write(lua)
    fh.close()

def configure_dependencies(project, source, cocos):
    stage = StagePathBuilder(cocos.basepath())
    if not os.path.exists(stage.basepath()):
        os.makedirs(stage.basepath())
    path = source.mediationpath("ios")
    networks = load_mediation_config(path)
    install_ios_dependencies(networks, project, cocos, stage)
    create_lua_mediation(networks, cocos)

# Select and make 'project' the active project.
def configure_ios_targets(project, source, cocos):
    stage = StagePathBuilder(cocos.basepath())

    # Load and save any changes made to the project to the current project
    # NOTE: I'm not sure this is necessary.

    # Save the target project as the current project
    # NOTE: I'm not sure this is necessary.

    # Interpolate template files

    if not os.path.exists(stage.basepath()):
        os.makedirs(stage.basepath())

    keys = {
        "##UGF-APP-BUNDLE##": project.bundle
      , "##UGF-APP-NAME##": project.name
      , "##UGF-APP-VERSION##": project.version
      , "##UGF-APP-BUILD##": project.build
      , "##UGF-EXECUTABLE##": project.executable
      , "##UGF-HOCKEY-APP-ID##": project.hockeyappid
      , "##UGF-FACEBOOK-ID##": project.facebookid
      , "##UGF-DESIGN-WIDTH##": project.design["width"]
      , "##UGF-DESIGN-HEIGHT##": project.design["height"]
      , "##UGF-SHOW-FPS##": "false"
    }

    # The pbxproj should not be a template, as it changes often. All replacements
    # can be done by replacing GameTools anyways.
    shutil.copyfile(cocos.iosprojectpath(), stage.path("project.pbxproj"))

    interpolator = Interpolator(project, cocos, stage, keys)
    interpolator.interpolate("templates/project/ios/Info.plist", "frameworks/runtime-src/proj.ios_mac/ios/Info.plist", interpolate_iosplist)
    interpolator.interpolate("templates/project/ios/AppConfig.h", "frameworks/runtime-src/proj.ios_mac/ios/AppConfig.h")
    interpolator.interpolate("templates/config.json", "config.json", interpolate_configjson)
    interpolator.interpolate("templates/project/config.lua", "src/config.lua", interpolate_projectconfig)
    interpolator.interpolate("stage/project.pbxproj", "frameworks/runtime-src/proj.ios_mac/GameTools.xcodeproj/project.pbxproj", interpolate_iospbxproj)

    # @todo Cleanup stage directory

    # @todo The orientation config may need to be specific to files so that
    # operations are checked correctly, but also that some options are removed!

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Upstart Game Framework - Configures a project into a Cocos2d-x project")
    parser.add_argument('configure', help="Configuration processes to perform on project", nargs="*", default=["all"])
    args = parser.parse_args()

    config = Config.load(configpath())
    checkconfig(config)

    source = ProjectPathBuilder(config)
    project = ProjectConfig.load(source.configpath())
    cocos = CocosPathBuilder(config, project.cocos)

    print("{}, Time: {}".format(VERSION, str(datetime.now())))

    valid_configure_options = ["all", "dependencies"]
    for option in args.configure:
        if option not in valid_configure_options:
            print("Invalid configure option '{}'. Valid options are: {}".format(option, ", ".join(valid_configure_options)))
            sys.exit(1)

    if "dependencies" in args.configure:
        configure_dependencies(project, source, cocos)
    elif "all" in args.configure:
        configure_ios_targets(project, source, cocos)
        configure_dependencies(project, source, cocos)
